Showroom comes with several predefined deployment scripts for the demos.

supervisor control
------------------

We have a class to control supervisor (already transmitted from the test setUp)

We can start and stop it:

    >>> supervisor.is_running
    False
    >>> supervisor.start()
    >>> supervisor.is_running
    True
    >>> supervisor.stop()
    >>> supervisor.is_running
    False
    >>> supervisor.start()
    >>> supervisor.is_running
    True


Available Demos
---------------

We can get the list of available demos as a dict:

    >>> from showroom import utils
    >>> available_demos = utils.available_demos()
    >>> from pprint import pprint
    >>> pprint(available_demos, width=1)
    {'error':           {'params': ['name', 'comment']},
     'error2':           {'params': ['name', 'comment']},
     'error3':           {'params': ['name', 'comment']},
     'error4':           {'params': ['name', 'comment']},
     'test1':           {'params': ['name', 'comment']},
     'test2':           {'params': ['name', 'comment']},
     'testapache':      {'params': ['name', 'comment']},
     'testapachebad':   {'params': ['name', 'comment']}}

Each demo definition itself is a dict.

>>> all(map(lambda x: type(x) is dict, available_demos.values()))
True

All demo definition dict should have at least a 'params' list:

>>> all(map(lambda x: 'params' in x, available_demos.values()))
True

We shouldn't have any installed demos:

>>> utils.installed_demos()
[]


Deploying a demo
----------------

We try to deploy the 'test1' demo:

>>> utils.deploy({'app':'test1'}, 'test1')

Ok, we check that the files are there:

>>> import os
>>> os.listdir(utils.PATHS['demos'])
['test1']
>>> sorted(os.listdir(os.path.join(utils.PATHS['demos'], 'test1')))
['demo.conf', 'foobar', 'start.sh', 'supervisor.cfg']

We try to deploy with the same name, we get an error:

>>> utils.deploy({'app':'test1'}, 'test1')
Traceback (most recent call last):
...
DeploymentError: this demo already exists

We try to deploy a non existent demo:

>>> utils.deploy({'app':'foo'}, 'bar')
Traceback (most recent call last):
...
DeploymentError: this demo does not exist


Now we can get the list of installed demos:

>>> pprint(utils.installed_demos(), width=1)
[{'comment': '', 'name': 'test1', 'port': '20000', 'status': 'STOPPED'}]

We can deploy again as another name:

>>> utils.deploy({'app':'test1'}, 'test1bis')

>>> pprint(utils.installed_demos(), width=1)
[{'comment': '', 'name': 'test1', 'port': '20000', 'status': 'STOPPED'},
 {'comment': '', 'name': 'test1bis', 'port': '20001', 'status': 'STOPPED'}]

We try to deploy a demo which has an error:

>>> utils.deploy({'app':'error'}, 'demoerror')
Traceback (most recent call last):
...
DeploymentError: installation ended with an error

We shouldn't have any remaining folder:

>>> os.listdir(utils.PATHS['demos'])
['test1', 'test1bis']

Installed Demo object
---------------------

we can instantiate an object representing a demo (even if it does not exist)

>>> demo = utils.InstalledDemo('nonexisting')


Removing a demo
---------------

Then we can remove a demo:

>>> utils.InstalledDemo('test1').destroy()
>>> pprint(utils.installed_demos(), width=1)
[{'comment': '', 'name': 'test1bis', 'port': '20001', 'status': 'STOPPED'}]

If we redeploy, the port is reassigned to 20000:

>>> utils.deploy({'app':'test1'}, 'test1')
>>> pprint(utils.installed_demos(), width=1)
[{'comment': '', 'name': 'test1', 'port': '20000', 'status': 'STOPPED'},
 {'comment': '', 'name': 'test1bis', 'port': '20001', 'status': 'STOPPED'}]


We try to destroy a non existent demo:

>>> utils.InstalledDemo('foobar').destroy()
Traceback (most recent call last):
...
DestructionError: this demo does not exist


We destroy both:

>>> utils.InstalledDemo('test1').destroy()
>>> utils.InstalledDemo('test1bis').destroy()
>>> utils.installed_demos()
[]

>>> os.listdir(utils.PATHS['demos'])
[]


Start, stop, status
-------------------

We deploy a simple demo

>>> utils.deploy({'app':'test1'}, 'test1')

We can build an object representing this demo:

>>> demo = utils.InstalledDemo('test1')
>>> demo.get_status()
'STOPPED'

The same with a non existing demo returns a specific status:

>>> utils.InstalledDemo('nonexisting').get_status()
'DESTROYED'
>>> utils.InstalledDemo('').get_status()
Traceback (most recent call last):
...
ValueError: empty demo name

We start it:

>>> demo.start()
>>> demo.get_status()
'RUNNING'

We stop it:

>>> demo.stop()
>>> demo.get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('test1')['statename']
'STOPPED'
>>> demo.destroy()

We deploy a demo whose startup script fails

>>> utils.deploy({'app':'error2'}, 'error2')
>>> utils.InstalledDemo('error2').start()
Traceback (most recent call last):
...
Fault: <Fault 40: 'ABNORMAL_TERMINATION: error2'>
>>> utils.InstalledDemo('error2').get_status() in ('BACKOFF', 'STARTING')
True
>>> import time
>>> while utils.InstalledDemo('error2').get_status() in ('BACKOFF', 'STARTING'):
...     time.sleep(0.2)
>>> utils.InstalledDemo('error2').get_status()
'FATAL'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('error2')['statename']
'FATAL'
>>> utils.InstalledDemo('error2').destroy()


Apache support
--------------

If the deployment script creates an apache2.conf file, this file is aggregated
to the global apache config through a link. This link is used to determine the
status.

>>> utils.deploy({'app':'testapache'}, 'test')
>>> demo = utils.InstalledDemo('test')
>>> demo.get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> demo.start()
>>> demo.get_status()
'RUNNING'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> demo.stop()
>>> demo.get_status()
'STOPPED'
>>> demo.destroy()
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'

If the provided apache config is erroneous, we don't start the app.

>>> utils.deploy({'app':'testapachebad'}, 'test')
>>> demo = utils.InstalledDemo('test')
>>> demo.get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> demo.start()
>>> demo.get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> demo.stop()
>>> demo.get_status()
'STOPPED'
>>> demo.destroy()
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'

Check that the process is stopped

>>> import commands
>>> commands.getoutput('ps -ef|grep sleep\ 99999999|grep -v grep')
''

The same with 2 corrects, and 1 bad :

>>> utils.deploy({'app':'testapache'}, 'test')
>>> utils.deploy({'app':'testapache'}, 'test2')
>>> utils.InstalledDemo('test').start()
>>> utils.InstalledDemo('test2').start()
>>> utils.InstalledDemo('test').get_status()
'RUNNING'
>>> utils.InstalledDemo('test2').get_status()
'RUNNING'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> utils.deploy({'app':'testapachebad'}, 'test3')
>>> utils.InstalledDemo('test3').get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> utils.InstalledDemo('test').get_status()
'RUNNING'
>>> utils.InstalledDemo('test2').get_status()
'RUNNING'
>>> utils.InstalledDemo('test').destroy()
>>> utils.InstalledDemo('test').get_status()
'DESTROYED'
>>> utils.InstalledDemo('test2').get_status()
'RUNNING'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> utils.InstalledDemo('test2').destroy()
>>> utils.InstalledDemo('test2').get_status()
'DESTROYED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('test3').destroy()


Apache + a process
------------------

We deploy a demo which contains both an apache config and a startup script:

>>> utils.deploy({'app':'test2'}, 'test2')
>>> utils.InstalledDemo('test2').start()
>>> utils.InstalledDemo('test2').get_status()
'RUNNING'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> utils.InstalledDemo('test2').stop()
>>> utils.InstalledDemo('test2').get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('test2').destroy()

The same with 2 demos:

>>> utils.deploy({'app':'test2'}, 'test2')
>>> utils.deploy({'app':'test2'}, 'test2bis')
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('test2').start()
>>> utils.InstalledDemo('test2bis').start()
>>> utils.InstalledDemo('test2').get_status()
'RUNNING'
>>> utils.InstalledDemo('test2bis').get_status()
'RUNNING'
>>> while supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']=='STARTING':
...     time.sleep(0.2)
>>> utils.InstalledDemo('test2').stop()
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'RUNNING'
>>> utils.InstalledDemo('test2bis').stop()
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('test2').get_status()
'STOPPED'
>>> utils.InstalledDemo('test2bis').get_status()
'STOPPED'
>>> utils.InstalledDemo('test2').destroy()
>>> utils.InstalledDemo('test2bis').destroy()

A script with a bad apache conf and a good startup script:

>>> utils.deploy({'app':'error3'}, 'error3')
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('error3').start()
>>> utils.InstalledDemo('error3').get_status()
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('error3')['statename']
'STOPPED'
>>> utils.InstalledDemo('error3').destroy()

Apache should restart

A script with a good apache conf and a bad startup script:

>>> utils.deploy({'app':'error4'}, 'error4')
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> utils.InstalledDemo('error4').start()
Traceback (most recent call last):
...
Fault: <Fault 40: 'ABNORMAL_TERMINATION: error4'>
>>> utils.InstalledDemo('error4').get_status() in ('STARTING', 'BACKOFF')
True
>>> supervisor.xmlrpc.supervisor.getProcessInfo('apache2')['statename']
'STOPPED'
>>> supervisor.xmlrpc.supervisor.getProcessInfo('error4')['statename'] in ('STARTING', 'BACKOFF')
True
>>> while supervisor.xmlrpc.supervisor.getProcessInfo('error4')['statename'] in ('STARTING', 'BACKOFF'):
...     time.sleep(0.2)
>>> supervisor.xmlrpc.supervisor.getProcessInfo('error4')['statename']
'FATAL'
>>> utils.InstalledDemo('error4').destroy()


>>> commands.getoutput('ps -ef|grep sleep\ 99999999|grep -v grep')
''

